var stations = [] // Declares an empty list of station objects that will store the json we get back from the server
var stylesArray = [
  [
    {
      "featureType": "administrative",
      "elementType": "geometry",
      "stylers": [
        {
          "visibility": "off"
        }
      ]
    },
    {
      "featureType": "administrative.land_parcel",
      "elementType": "labels",
      "stylers": [
        {
          "visibility": "off"
        }
      ]
    },
    {
      "featureType": "poi",
      "stylers": [
        {
          "visibility": "off"
        }
      ]
    },
    {
      "featureType": "poi",
      "elementType": "labels.text",
      "stylers": [
        {
          "visibility": "off"
        }
      ]
    },
    {
      "featureType": "road",
      "elementType": "labels.icon",
      "stylers": [
        {
          "visibility": "off"
        }
      ]
    },
    {
      "featureType": "road.local",
      "elementType": "labels",
      "stylers": [
        {
          "visibility": "off"
        }
      ]
    },
    {
      "featureType": "transit",
      "stylers": [
        {
          "visibility": "off"
        }
      ]
    },
    {
      "featureType": "transit.station",
      "stylers": [
        {
          "visibility": "on"
        },
        {
          "weight": 8
        }
      ]
    },
    {
      "featureType": "transit.station.airport",
      "stylers": [
        {
          "visibility": "on"
        }
      ]
    },
    {
      "featureType": "transit.station.bus",
      "stylers": [
        {
          "visibility": "on"
        }
      ]
    },
    {
      "featureType": "transit.station.rail",
      "stylers": [
        {
          "visibility": "on"
        }
      ]
    }
  ]
]

let map; // Declares the map object that will be generated by the google maps api

function getStationsData(onStationDataLoaded) { // Function that will call whatever function is passed in as onStationDataLoaded
  // Get JSON Data
  var xmlhttp = new XMLHttpRequest();
  var url = "http://127.0.0.1:5000/testingGetRoute";

  // Empty the current stations list
  stations = []

  // Request station data from our own API, woah
  xmlhttp.onreadystatechange = function () {
    console.log(`readyState: ${this.readyState} and status: ${this.status}`);
    if (xmlhttp.readyState == 4) {
      // If status code is 200 (and the code is good), do this
      if (xmlhttp.status == 200) {
        var myStations = JSON.parse(xmlhttp.responseText);
        for (let i = 0; i < myStations.length; i++) {
          stations.push(getMarkerInfo(myStations[i]));
        }
        if (typeof (onStationDataLoaded) === "function") {
          // Once the data has been loaded, call the function that has been passed into onStationDataLoaded (in our case the create Markers)
          onStationDataLoaded(stations);
        }
      }
    }
  }

  // Open request from our own API, and send it
  xmlhttp.open("GET", url, true);
  xmlhttp.send();

}

function getMarkerInfo(myStation) { // Function to get relevant marker info from stations objects
  var stationMarkerInfo = {
    stationName: myStation.address,
    stationPosition: { lat: myStation.position.lat, lng: myStation.position.lng }
  };
  return stationMarkerInfo;
}

function createMarkers(stations) { // Function to create a marker for each station and add it to the map
  // For each station in the stations list, create a new marker
  for (let i = 0; i < stations.length; i++) {
    var marker = new google.maps.Marker({
      position: stations[i].stationPosition,
      map,
      title: stations[i].stationName,
    });
    marker.setMap(map)
  };
}

function initMap() {
  map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: 53.350, lng: -6.260 },
    zoom: 14,
    styles: stylesArray,
  })

  // Call the getStationsData function using the createMarkers function.
  // This will call the function that executes the get request, wait for the stations to load, and then call the create markers function with the loaded stations
  getStationsData(createMarkers);

}

window.initMap = initMap; // window.initMap refers to the initmap callback in the html page